name: codeclarity-dev

services:
  rabbitmq:
    restart: always
    image: rabbitmq:4.1.4-management-alpine
    env_file:
      - ../env/.env.dev
    environment:
      - RABBITMQ_ENABLED_PLUGINS_FILE=/etc/rabbitmq/enabled_plugins
    command: |
      bash -c '
        rabbitmq-plugins enable rabbitmq_management rabbitmq_prometheus --offline &&
        exec docker-entrypoint.sh rabbitmq-server
      '
    ports:
      - target: 5672
        published: ${AMQP_PORT:-5672}
        protocol: tcp
        mode: host
      - target: 15672
        published: ${AMQP_PORT_2:-15672}
        protocol: tcp
        mode: host
      - target: 15692
        published: ${AMQP_PROMETHEUS_PORT:-15692}
        protocol: tcp
        mode: host
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 500M

  db:
    image: postgres:17.6-alpine
    restart: always
    # set shared memory limit when using docker-compose
    shm_size: 128mb
    # or set shared memory limit when deploy via swarm stack
    #volumes:
    #  - type: tmpfs
    #    target: /dev/shm
    #    tmpfs:
    #      size: 134217728 # 128*2^20 bytes = 128Mb
    volumes:
      - ./docker-entrypoint-initdb:/docker-entrypoint-initdb.d/
      - ../../dump:/dump
      - db_data_container:/var/lib/postgresql/data/pgdata
    ports:
      - 5432:5432
    env_file:
      - ../env/.env.dev

  adminer:
    image: adminer:5.4.1
    restart: always
    ports:
      - 8080:8080
    command: [ "php", "-d", "memory_limit=-1", "-d", "post_max_size=500M", "-d", "upload_max_filesize=500M", "-S", "0.0.0.0:8080", "-t", "/var/www/html" ]

  prometheus:
    image: prom/prometheus:v3.7.1
    container_name: codeclarity-prometheus-dev
    restart: always
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.external-url=http://localhost:9091'
    depends_on:
      - rabbitmq
      - db
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  grafana:
    image: grafana/grafana:12.2.0
    container_name: codeclarity-grafana-dev
    restart: always
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:v0.18.1
    container_name: codeclarity-postgres-exporter-dev
    restart: always
    env_file:
      - ../env/.env.dev
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:$${POSTGRES_PASSWORD}@codeclarity-dev-db-1:5432/codeclarity?sslmode=disable
    ports:
      - "9187:9187"
    depends_on:
      - db
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M

  loki:
    image: grafana/loki:3.5.7
    container_name: codeclarity-loki-dev
    restart: always
    ports:
      - "3100:3100"
    volumes:
      - ./loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    depends_on:
      - db
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  alloy:
    image: grafana/alloy:v1.11.2
    container_name: codeclarity-alloy-dev
    restart: always
    ports:
      - "12345:12345"  # Alloy UI
    volumes:
      - ./alloy-config.alloy:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: 
      - run
      - /etc/alloy/config.alloy
      - --server.http.listen-addr=0.0.0.0:12345
      - --storage.path=/var/lib/alloy/data
    depends_on:
      - loki
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

volumes:
  results_db_data_container:
  results_db_apps_data_container:
  db_data_container:
  prometheus_data:
  grafana_data:
  loki_data:
